{
  "version": 3,
  "file": "index.js",
  "sourceRoot": "../src/",
  "sources": [
    "index.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "'use strict'\r\nYma = ->\r\n  components = ['config', 'service', 'controller', 'component', 'template', 'route']\r\n  view = null\r\n  viewScope = null\r\n  scopeId = 0\r\n  fragId = 0\r\n  index = {}\r\n  data = {}\r\n  register = {}\r\n  for component in components\r\n    data[component] = {}\r\n    ((component) ->\r\n      register[component] = (name, fn) ->\r\n        data[component][name] = fn()\r\n    )(component)\r\n  scope = {}\r\n  evalInContext = (str, context) ->\r\n    try\r\n      (new Function(\"with(this) {return #{str}}\"))\r\n      .call context\r\n  hash = (str) ->\r\n    h = 5381\r\n    i = str.length\r\n    while i\r\n      h = (h * 33) ^ str.charCodeAt --i\r\n    h\r\n  callCallbacks = (obj, name) ->\r\n    for cb in obj.$callbacks[name]\r\n      cb?() \r\n  getScopeVar = (myscope, name) ->\r\n    myvar = myscope\r\n    bits = name.split /\\./g\r\n    for bit in bits\r\n      myvar = myvar[bit]\r\n    if myvar is myscope\r\n      return undefined \r\n    else\r\n      return myvar\r\n  updateFrags = (fragsToUpdate) ->\r\n    i = fragsToUpdate.length\r\n    if i\r\n      while i--\r\n        frags = fragsToUpdate[i]\r\n        for fragKey of frags\r\n          frag = frags[fragKey]\r\n          fragElem = document.querySelector \"[frag=#{frag.id}]\"\r\n          myscope = getScope fragElem\r\n          if typeof frag.index is 'string'\r\n            fragElem.setAttribute frag.index, fillTemplate frag.template, myscope, frag.id, frag.index\r\n          else\r\n            fragNode = fragElem.childNodes[frag.index]\r\n            fragNode.nodeValue = fillTemplate frag.template, myscope, frag.id, frag.index \r\n  makeScope = (myscope, _id) ->\r\n    newScope =\r\n      id: _id or \"s#{scopeId++}\" \r\n      $root: scope.root\r\n      $parent: myscope\r\n      $children: []\r\n      $callbacks:\r\n        destroy: []\r\n      $on: (name, fn) ->\r\n        @.$callbacks[name].push fn\r\n      $updating: false\r\n      $update: (arg) ->\r\n        if @.$updating\r\n          setTimeout @.update args\r\n        else\r\n          @.$updating = true\r\n          fragsToUpdate = []\r\n          indexScope = index[@.id]\r\n          if indexScope\r\n            for key of indexScope.vars\r\n              indexVar = indexScope.vars[key]\r\n              myvar = getScopeVar @, key\r\n              myhash = hash JSON.stringify myvar\r\n              if myhash isnt indexVar.value\r\n                indexVar.value = myhash\r\n                for fragKey of indexVar.frags\r\n                  frag = indexScope.frags[fragKey]\r\n                  if fragsToUpdate.indexOf(frag) is -1\r\n                    fragsToUpdate.push frag\r\n          if fragsToUpdate.length\r\n            updateFrags fragsToUpdate\r\n          @.$updating = false\r\n      $destroy: ->\r\n        callCallbacks @, 'destroy'\r\n        #@.$parent.$children?.splice(@.$parent.$children.indexOf(@), 1)\r\n        for child in @.$children\r\n          child.$destroy()\r\n        @.children = undefined \r\n        delete scope[@.id]\r\n        #find the fragments to delete and \r\n        indexScope = index[@.id]\r\n        if indexScope \r\n          for frag of indexScope.frags\r\n            for scopeKey of index\r\n              if indexScope.id isnt scopeKey\r\n                testScope = index[scopeKey]\r\n                delete testScope.frags[frag]\r\n                for key of testScope.vars\r\n                  myvar = testScope.vars[key]\r\n                  delete myvar.frags[frag]\r\n                  if Object.keys(myvar.frags).length is 0\r\n                    delete testScope.vars[key]\r\n        delete index[@.id]\r\n      $use: (args) ->\r\n        if typeof args is 'string'\r\n          args = [args]\r\n        for arg in args\r\n          if data.service[arg]\r\n            @[\"_#{arg}\"] = data.service[arg]\r\n      $inherit: ->\r\n    scope[newScope.id] = newScope\r\n    myscope?.$children?.push newScope\r\n    newScope\r\n  makeScope {}, 'root'\r\n  scope.root.thing = 'buddy'\r\n  scope.root.testFn = ->\r\n    console.log 'hey from root scope, ' + @.thing\r\n  renderComponent = (node, elem, myscope, append) ->\r\n    temp = document.createElement('template')\r\n    frag = document.createElement 'div'\r\n    newScope = if elem.scope then makeScope(myscope) else myscope\r\n    newScope.$node = node\r\n    frag.innerHTML = renderTemplate(fetchTemplate(elem), newScope)\r\n    temp.content.appendChild frag\r\n    elemRoot = frag.querySelector '*'\r\n    newScope.$elem = elemRoot\r\n    fetchController elem.controller, newScope\r\n    node[if append then 'append' else 'replaceWith'] elemRoot\r\n    if elem.scope\r\n      elemRoot.setAttribute 'scope', newScope.id\r\n  fetchController = (arg, myscope) -> \r\n    if arg\r\n      type = typeof arg\r\n      if type is 'function'\r\n        arg.call myscope\r\n      else if type is 'string'\r\n        ctrl = data.controller[arg]\r\n        if ctrl\r\n          ctrl.call myscope\r\n  fetchTemplate = (arg) ->\r\n    name = ''\r\n    if arg\r\n      if typeof arg is 'object'\r\n        if arg.template\r\n          name = arg.template\r\n        else if arg.templateUrl\r\n          name = arg.templateUrl\r\n      else \r\n        name = arg\r\n    data.template[name]?.html or '' \r\n  setIndexVar = (myscope, fragId, fragIndex, fragScopeId, template, vars) ->\r\n    indexScope = index[myscope.id] = index[myscope.id] or\r\n      frags: {}\r\n      vars: {}\r\n    myfrags = indexScope.frags\r\n    myvars = indexScope.vars\r\n    frag = myfrags[fragId] = myfrags[fragId] or {}\r\n    frag = frag[\"i#{fragIndex}\"] = frag[\"i#{fragIndex}\"] or {}\r\n    if typeof frag.template is 'undefined'\r\n      frag.template = template\r\n    frag.vars = frag.vars or {}\r\n    frag.id = fragId\r\n    frag.index = fragIndex\r\n    frag.scope = fragScopeId\r\n    vars.map (myvar) ->\r\n      if /\\$parent|\\$root/.test myvar.route[0]\r\n        newVar = JSON.parse JSON.stringify myvar\r\n        newVar.route.splice 0, 1\r\n        newVar.name = newVar.name.replace /^(\\$parent|\\$root)\\./, ''\r\n        newScope = myscope[myvar.route[0]]\r\n        if newScope\r\n          return setIndexVar newScope, fragId, fragIndex, myscope.id, template, [newVar]\r\n      if typeof myvars[myvar.name] is 'undefined'\r\n        myscope[myvar.name] = myscope[myvar.name] or null\r\n        myvars[myvar.name] = \r\n          value: hash JSON.stringify myscope[myvar.name]\r\n          frags: {}\r\n        myvars[myvar.name].frags[fragId] = true\r\n      else\r\n        if not myvars[myvar.name].frags[fragId]\r\n          myvars[myvar.name].frags[fragId] = true\r\n      frag.vars[myvar.name] = true\r\n  fillTemplate = (template, data, fragId, fragIndex) ->\r\n    template.replace /\\{\\{(.+?)\\}\\}/g, (all, match) ->\r\n      context = {}\r\n      #console.log match\r\n      ast = acorn.parse match\r\n      vars = []\r\n      myvar = null\r\n      doWalk = (ast) ->\r\n        acorn.walk.full ast, (node) ->\r\n          switch node.type\r\n            when 'Identifier'            \r\n              myvar =\r\n                route: [node.name]\r\n                name: node.name\r\n                start: node.start\r\n              vars.push myvar\r\n            when 'CallExpression'\r\n              fnstart = match.indexOf('(', node.start)\r\n              fnargs = match.substr fnstart, node.end - fnstart\r\n              for v in vars\r\n                if v.start is node.start\r\n                  v.name += fnargs\r\n            when 'MemberExpression'\r\n              if myvar\r\n                if node.property.type is 'Identifier'\r\n                  myvar.route.push node.property.name\r\n                  myvar.name += \".#{node.property.name}\"\r\n                else if node.property.type is 'Literal'\r\n                  myvar.route.push \"[#{node.property.raw}]\"\r\n                  myvar.name += \"[#{node.property.raw}]\"\r\n            when 'AssignmentExpression'\r\n              doWalk node.left\r\n              doWalk node.right\r\n      doWalk ast\r\n      if typeof fragId isnt 'undefined'\r\n        setIndexVar data, fragId, fragIndex, data.id, template, vars\r\n      evalInContext match, data\r\n  renderTemplate = (template, myscope) ->\r\n    temp = document.createElement('template')\r\n    frag = document.createElement 'div'\r\n    frag.innerHTML = template\r\n    temp.content.appendChild frag\r\n    for elem of data.component\r\n      nodes = frag.querySelectorAll elem\r\n      if nodes and nodes.length\r\n        for node in nodes\r\n          renderComponent node, data.component[elem], myscope\r\n      nodes = frag.querySelectorAll(\"[#{elem}]\")\r\n      if nodes and nodes.length\r\n        for node in nodes\r\n          renderComponent node, data.component[elem], myscope\r\n    frag.innerHTML\r\n  collectTemplatesFromHTML = ->\r\n    scripts = document.getElementsByTagName 'SCRIPT'\r\n    for script in scripts\r\n      if script.type is 'text/template'\r\n        register.template script.getAttribute('name'), ->\r\n          html: script.innerText\r\n  renderVars = (elem, myscope) ->\r\n    if attrScope = elem.getAttribute 'scope'\r\n      myscope = scope[attrScope]\r\n    fId = elem.getAttribute 'frag'\r\n    for childNode, i in elem.childNodes\r\n      if childNode.nodeValue and childNode.nodeValue.indexOf('{{') isnt -1\r\n        if not fId\r\n          fId = \"f#{fragId++}\"\r\n          elem.setAttribute 'frag', fId\r\n        childNode.nodeValue = fillTemplate childNode.nodeValue, myscope, fId, i\r\n    for attr in elem.attributes\r\n      if attr.value.indexOf('{{') isnt -1\r\n        if not fId\r\n          fId = \"f#{fragId++}\"\r\n          elem.setAttribute 'frag', fId\r\n        attr.value = fillTemplate attr.value, myscope, fId, attr.name\r\n      else if attr.name is 'model'\r\n        console.log 'model'\r\n        elem.value = fillTemplate \"{{#{attr.value}}}\", myscope\r\n    for child in elem.children\r\n      renderVars child, myscope\r\n  changeRoute = (state) ->\r\n    #tear down current route\r\n    if viewScope then viewScope.$destroy()\r\n    nextRoute = data.route[state]\r\n    viewScope = makeScope scope.root\r\n    fetchController nextRoute.controller, viewScope\r\n    view.setAttribute 'scope', viewScope.id\r\n    #fId = \"f#{fragId++}\"\r\n    #view.setAttribute 'frag', fId\r\n    view.innerHTML = renderTemplate(fetchTemplate(nextRoute), viewScope)\r\n    renderVars view, viewScope\r\n    #view.innerHTML = fillTemplate(renderTemplate(fetchTemplate(nextRoute), viewScope), viewScope, fId)\r\n  getScope = (elem) ->\r\n    while elem and elem.tagName isnt 'HTML'\r\n      if myscope = elem.getAttribute 'scope'\r\n        return scope[myscope]\r\n      elem = elem.parentNode\r\n    scope.root\r\n  start = () ->\r\n    view = document.querySelector 'view'\r\n    myscope = scope.root\r\n    collectTemplatesFromHTML()\r\n    route = null\r\n    for routeKey of data.route\r\n      if data.route[routeKey].default \r\n        route = data.route[routeKey]\r\n        changeRoute routeKey\r\n        break\r\n    if not route\r\n      if data.route['/']\r\n        changeRoute '/'\r\n    window.addEventListener 'click', (e) ->\r\n      myscope = getScope e.target\r\n      if e.target.getAttribute 'click'\r\n        evalInContext e.target.getAttribute('click'), myscope\r\n      if e.target.tagName is 'A'\r\n        e.preventDefault()\r\n        e.stopPropagation()\r\n        changeRoute e.target.getAttribute('href')\r\n    window.addEventListener 'keyup', (e) ->\r\n      myscope = getScope e.target\r\n      if e.target.getAttribute 'model'\r\n        evalInContext \"#{e.target.getAttribute('model')} = '#{e.target.value}'\", myscope\r\n        myscope.$update()\r\n      if e.target.getAttribute 'keyup'\r\n        console.log evalInContext e.target.getAttribute('keyup'), myscope\r\n  window.setTimeout start\r\n  register: register\r\nyma = Yma()\r\n"
  ]
}