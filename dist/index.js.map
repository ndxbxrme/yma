{
  "version": 3,
  "file": "index.js",
  "sourceRoot": "..",
  "sources": [
    "src\\index.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "ogid = (radix, rnd) ->\r\n  parseInt((new Date().valueOf() - new Date(2020,0,1).valueOf()).toString().concat(Math.floor(Math.random() * (9999 or rnd))).split('').reverse().join('')).toString(radix or 36)\r\nhash = (str) ->\r\n  if typeof str is 'undefined'\r\n    return 0\r\n  h = 5381\r\n  i = str.length\r\n  while i\r\n    h = (h * 33) ^ str.charCodeAt --i\r\n  h\r\nhashObject = (obj) ->\r\n  hashed = {}\r\n  for key, val of obj\r\n    continue if /^\\$/.test key\r\n    hashed[key] = hash JSON.stringify(val)\r\n  hashed\r\nCallbacks = ->\r\n  callbacks = {}\r\n  toRemove = []\r\n  $on: (name, fn) ->\r\n    callbacks[name] = callbacks[name] or []\r\n    callbacks[name].push fn\r\n  $once: (name, fn) ->\r\n    callbacks[name] = callbacks[name] or []\r\n    onceFn = (data) ->\r\n      output = await fn data\r\n      toRemove.push onceFn\r\n      output\r\n    callbacks[name].push onceFn\r\n  $off: (name, fn) ->\r\n    callbacks[name] = callbacks[name] or []\r\n    callbacks[name].splice callbacks[name].indexOf(fn), 1\r\n  $call: (name, data) ->\r\n    if callbacks[name]\r\n      for fn in callbacks[name]\r\n        await fn data\r\n    for fn in toRemove\r\n      callbacks[name].splice callbacks[name].indexOf(fn), 1\r\n    toRemove = []\r\nEnvironment = ->\r\n  #from headjs\r\n  ua = navigator.userAgent.toLowerCase()\r\n  mobile = /mobile|android|kindle|silk|midp|phone|(windows .+arm|touch)/.test(ua)\r\n  ua = /(chrome|firefox)[ \\/]([\\w.]+)/.exec(ua) or /(iphone|ipad|ipod)(?:.*version)?[ \\/]([\\w.]+)/.exec(ua) or /(android)(?:.*version)?[ \\/]([\\w.]+)/.exec(ua) or /(webkit|opera)(?:.*version)?[ \\/]([\\w.]+)/.exec(ua) or /(msie) ([\\w.]+)/.exec(ua) or /(trident).+rv:(\\w.)+/.exec(ua) or []\r\n  browser = ua[1]\r\n  switch browser\r\n    when 'msie', 'trident' then 'ie'\r\n    when 'ipod', 'ipad', 'iphone' then 'ios'\r\n    when 'webkit' then 'safari'\r\n  mobile: mobile\r\n  browser: browser\r\n  version: ua[2]\r\nYma = (appName) ->\r\n  rootElem = null\r\n  components = {}\r\n  elements = []\r\n  scopes = {}\r\n  services = {}\r\n  environment = Environment()\r\n  callbacks = Callbacks()\r\n  bootstrapped = false\r\n  makeId = (node, root) ->\r\n    root = root or rootElem\r\n    return 'root' if node is root\r\n    id = ''\r\n    while node isnt root\r\n      id += node.tagName + ':'\r\n      mynode = node\r\n      while mynode.previousSibling\r\n        id += mynode.tagName + '@'\r\n        mynode = mynode.previousSibling\r\n      node = node.parentNode\r\n    id\r\n  evalInContext = (str, context) ->\r\n    try\r\n      (new Function(\"with(this) {return #{str}}\"))\r\n      .call context\r\n  offset = (node) ->\r\n    nodeOffset =  x: 0, y: 0, w: node.offsetWidth, h: node.offsetHeight\r\n    while node.parentNode\r\n      nodeOffset.x += node.offsetLeft\r\n      nodeOffset.y += node.offsetTop\r\n      node = node.parentNode\r\n    nodeOffset\r\n  fillTemplate = (template, scope) ->\r\n    template.replace /\\{\\{(.+?)\\}\\}/g, (all, expression) ->\r\n      if typeof(result = evalInContext expression, scope) is 'undefined'\r\n        ''\r\n      else\r\n        result\r\n  mergeScopes = (scope, merge, protectedFields) ->\r\n    protectedFields = protectedFields or []\r\n    for key, val of merge\r\n      if not protectedFields.includes key\r\n        scope[key] = val\r\n  cleanupScopes = ->\r\n    for id, scope of scopes\r\n      scopeElems = elements.filter (element) -> element.scope is id\r\n      if scopeElems.length is 0\r\n        scope.$parent?.$children.splice scope.$parent?.$children.indexOf(id), 1\r\n        await scope.$call 'teardown'\r\n        #remove scope from any services\r\n        delete scopes[scope.$id]\r\n  teardown = (id) ->\r\n    r = new RegExp id + '$'\r\n    elements = elements.filter (element) ->\r\n      not r.test element.id\r\n    await cleanupScopes()\r\n  teardownChildren = (id) ->\r\n    r = new RegExp '.+' + id + '$'\r\n    elements = elements.filter (element) ->\r\n      not r.test element.id\r\n    await cleanupScopes()\r\n  updateScopes = (updatedScopes) ->\r\n    index = 0\r\n    while updatedScopes.length > index + 1\r\n      i = updatedScopes.length\r\n      while i-- > index\r\n        if updatedScopes[i].$isDescendantOf updatedScopes[0]\r\n          updatedScopes.splice i, 1\r\n          continue\r\n        if updatedScopes[i].$isAncestorOf updatedScopes[0]\r\n          updatedScopes[0] = updatedScopes[i]\r\n          updatedScopes.splice i, 1\r\n          continue\r\n      index++\r\n    updateScope = (scope, changedVars) ->\r\n      myhash = hashObject scope\r\n      for key, val of myhash\r\n        if val isnt scope.$hash?[key]\r\n          if typeof(changedVars[key]) isnt 'undefined'\r\n            changedVars[key] = scope[key]\r\n        else\r\n          if typeof(changedVars[key]) isnt 'undefined'\r\n            scope[key] = changedVars[key]\r\n      scope.$hash = myhash\r\n      for childScope in scope.$children\r\n        updateScope childScope, changedVars\r\n    preRoot = document.createElement 'div'\r\n    preElements = []\r\n    realRoot = elements[0]\r\n    preRoot.innerHTML = realRoot.html\r\n    await preRender preRoot, preRoot, 0, preElements\r\n    unknowns = preElements.filter (element) -> /^UNKNOWN@/.test(element.id)\r\n    elemsToUpdate = []\r\n    unknowns.forEach (unknown) ->\r\n      parentId = unknown.id.replace /UNKNOWN@\\w+:[\\w@]+@/, ''\r\n      elemsToUpdate.push parentId if not elemsToUpdate.includes parentId\r\n    for elemId in elemsToUpdate\r\n      element = elements.filter((element) -> element.id is elemId)[0]\r\n      if element\r\n        scope = scopes[element.scope]\r\n        await teardownChildren elemId\r\n        element.elem.innerHTML = element.html\r\n        await renderChildren element.elem, scope\r\n    reset = (scope) ->\r\n      elemsToReset = elements.filter (element) ->\r\n        element.scope is scope.$id\r\n      for elem in elemsToReset\r\n        t = 0\r\n        for node in elem.elem.childNodes\r\n          if node.nodeType is document.TEXT_NODE\r\n            node.replaceWith elem.textNodes[t++] or ''\r\n        for name, val of elem.attributes\r\n          elem.elem.setAttribute name, val if elem.elem.hasAttribute(name)\r\n      reset childScope for childScope in scope.$children\r\n    i = updatedScopes.length\r\n    while i-- > 0\r\n      updateScope updatedScopes[i], {}\r\n      reset updatedScopes[i]\r\n      await updatedScopes[i].$callChildren 'update'\r\n    await fillVars()\r\n    await checkAttrs()\r\n    preRoot = null\r\n    return\r\n  scopeVar = (op, path, value, scope) ->\r\n    myvar = evalInContext path, scope\r\n    arr = []\r\n    splitPoints = []\r\n    inside = null\r\n    lookingFor = null\r\n    level = 0\r\n    for letter, i in path.split ''\r\n      if inside\r\n        if letter is lookingFor\r\n          level--\r\n          if level is 0\r\n            Object.assign splitPoints[splitPoints.length-1],\r\n              endIndex: i\r\n              endPath: path.substr 0, i + 1\r\n            inside = null\r\n            lookingFor = null\r\n        else if letter is inside\r\n          level++\r\n      else\r\n        if letter is '['\r\n          level++\r\n          inside = '['\r\n          lookingFor = ']'\r\n          splitPoints.push\r\n            type: inside + lookingFor\r\n            index: i\r\n            path: path.substr 0, i\r\n        else if letter is '('\r\n          level++\r\n          inside = '('\r\n          lookingFor = ')'\r\n          splitPoints.push\r\n            type: inside + lookingFor\r\n            index: i\r\n            path: path.substr 0, i\r\n        else if letter is '.'\r\n          splitPoints.push\r\n            type: 'object'\r\n            index: i\r\n            path: path.substr 0, i\r\n    myvar = null\r\n    for sp in splitPoints\r\n      if sp.type is 'object'\r\n        myvar = evalInContext sp.path, scope\r\n        if typeof(myvar) is 'undefined'\r\n          myvar = evalInContext 'this.' + sp.path + '={}', scope\r\n      if sp.type is '[]'\r\n        myvar = evalInContext sp.endPath, scope\r\n        if typeof(myvar) is 'undefined'\r\n          myvar = evalInContext 'this.' + sp.path + '=[]', scope\r\n    lastPoint = splitPoints[splitPoints.length - 1]\r\n    lastIndex = if lastPoint then (lastPoint.lastIndex or lastPoint.index) + 1 else 0\r\n    field = path.substr lastIndex\r\n    if op is 'get'\r\n      return (myvar or scope)[field]\r\n    else\r\n      (myvar or scope)[field] = value\r\n    value\r\n  setScopeVar = (path, value, scope) ->\r\n    scopeVar 'set', path, value, scope\r\n  getScopeVar = (path, scope) ->\r\n    scopeVar 'get', path, null, scope\r\n  Scope = (merge) ->\r\n    scopeCallbacks = Callbacks()\r\n    timeouts = []\r\n    intervals = []\r\n    newscope =\r\n      $id: ogid()\r\n      $children: []\r\n      $parent: null\r\n      $environment: environment\r\n      $update: (updates, hard) ->\r\n        myscope = @\r\n        while myscope.$parent\r\n          for key of updates\r\n            myprop = getScopeVar key, myscope\r\n            if typeof(myprop) isnt 'undefined'\r\n              sharedWithParent = myprop is getScopeVar key, myscope.$parent\r\n              setScopeVar key, updates[key], myscope\r\n              delete updates[key] if not sharedWithParent\r\n            else\r\n              setScopeVar key, updates[key], myscope\r\n              delete updates[key]\r\n          myscope = myscope.$parent\r\n        updatedScopes = Object.values(scopes).filter (scope) -> (JSON.stringify(scope.$hash) isnt JSON.stringify(hashObject scope))\r\n        await updateScopes updatedScopes\r\n        callbacks.$call 'updated'\r\n      $use: (name) ->\r\n        if service = services[name]\r\n          @[name] = service.fn\r\n          service.scopes.push @.$id\r\n        else if component = components[name.toUpperCase()]\r\n          services[name] =\r\n            fn: (component.service or component)()\r\n            scopes: [@.$id]\r\n          @[name] = services[name].fn\r\n        @.$on 'teardown', ->\r\n          services[name].scopes.splice services[name].scopes.indexOf(@.$id), 1\r\n      $on: scopeCallbacks.$on\r\n      $once: scopeCallbacks.$once\r\n      $off: scopeCallbacks.$off\r\n      $call: scopeCallbacks.$call\r\n      $callChildren: (name, data) ->\r\n        await scopeCallbacks.$call name, data\r\n        for childScope in @.$children\r\n          await childScope.$callChildren name, data if childScope #check this\r\n        null\r\n      $isDescendantOf: (scope) ->\r\n        return false if scope.$id is @.$id\r\n        myscope = @\r\n        while myscope.$parent\r\n          return true if myscope.$id is scope.$id\r\n          myscope = myscope.$parent\r\n        false\r\n      $isAncestorOf: (scope) ->\r\n        return false if scope.$id is @.$id\r\n        check = (myscope) ->\r\n          return true if myscope.$id is scope.$id\r\n          for childScope in myscope.$children\r\n            return true if check childScope\r\n          false\r\n        check scope\r\n      $offset: offset\r\n      $timeout: (fn, delay) ->\r\n        if timeouts.length is 0\r\n          scopeCallbacks.$on 'teardown', ->\r\n            for timeout in timeouts\r\n              window.clearTimeout timeout\r\n        timeouts.push window.setTimeout fn, delay\r\n      $interval: (fn, delay) ->\r\n        if intervals.length is 0\r\n          scopeCallbacks.$on 'teardown', ->\r\n            for interval in intervals\r\n              window.clearTimeout interval\r\n        intervals.push window.setTimeout fn, delay\r\n      $addEventListeners: (elem, listeners, fn) ->\r\n        if typeof(listeners) is 'string'\r\n          listeners = [listeners]\r\n        for listener in listeners\r\n          elem.addEventListener listener, fn\r\n        @.$on 'teardown', ->\r\n          for listener in listeners\r\n            elem.removeEventListener listener, fn\r\n    if merge and merge.$id\r\n      merge.$children.push newscope\r\n      newscope.$parent = merge\r\n    mergeScopes newscope, merge, Object.keys(newscope)\r\n    newscope\r\n\r\n  getElement = (elem) ->\r\n    id = makeId elem\r\n    elements.filter((element) -> element.id is id)[0]\r\n  getProps = (elem, scope) ->\r\n    myattrs = {}\r\n    elem.getAttributeNames().forEach (name) -> myattrs[name] = if scope then fillTemplate(elem.getAttribute(name), scope) else elem.getAttribute(name)\r\n    myattrs\r\n  renderChildren = (elem, scope) ->\r\n    #return if /\\byma-router-parked\\b/.test elem.className\r\n    children = []\r\n    children.push child for child in elem.children\r\n    await render child, scope for child in children\r\n  render = (elem, scope) ->\r\n    preId = null\r\n    scopes[scope.$id] = scope\r\n    scope.$hash = hashObject scope\r\n    scope.$phase = 'render'\r\n    scope.$call 'bootstrap'\r\n    html = elem.innerHTML\r\n    textNodes = []\r\n    attributes = {}\r\n    data = {}\r\n    for node in elem.childNodes\r\n      textNodes.push node.data if node.nodeType is document.TEXT_NODE\r\n    for attr in elem.getAttributeNames()\r\n      attributes[attr] = elem.getAttribute attr\r\n      if attrComponent = components[attr.toUpperCase()]\r\n        myscopes = await attrComponent.pre scope, elem, getProps(elem, scope) if typeof(attrComponent.pre) is 'function'\r\n        if typeof(myscopes) isnt 'undefined'\r\n          elem.removeAttribute attr\r\n          preId = 'PREX:' + makeId elem\r\n          if myscopes\r\n            if myscopes.length\r\n              i = myscopes.length\r\n              while i-- > 0\r\n                clone = elem.cloneNode()\r\n                clone.innerHTML = elem.innerHTML\r\n                elem.parentNode.insertBefore clone, elem.nextSibling\r\n                render clone, myscopes[i]\r\n              elem.innerHTML = ''\r\n              elem.parentNode.removeChild elem\r\n            else\r\n              elem.innerHTML = ''\r\n              elem.parentNode.removeChild elem if myscopes.length is 0\r\n            #return#check this\r\n        elem.setAttribute 'checkattrs', true\r\n    if elem.parentNode and component = components[elem.tagName]\r\n      newscope = Scope scope\r\n      scope = newscope\r\n      scopes[scope.$id] = scope\r\n      data = component.controller scope, elem, getProps(elem, scope.$parent) if component.controller\r\n      scope.$hash = hashObject scope\r\n      elem.innerHTML = if component.template then component.template else html\r\n      elem.innerHTML = elem.innerHTML.replace '<children></children>', html\r\n    elements.push\r\n      id: preId or makeId elem\r\n      elem: elem\r\n      scope: scope.$id\r\n      html: html\r\n      textNodes: textNodes\r\n      attributes: attributes\r\n      data: data\r\n    await renderChildren elem, scope\r\n  preRenderChildren = (elem, root, preElements) ->\r\n    #return if /\\byma-router-parked\\b/.test elem.className\r\n    children = []\r\n    children.push child for child in elem.children\r\n    await preRender child, root, 0, preElements for child in children\r\n  preRender = (elem, root, index, preElements) ->\r\n    id = makeId elem, root\r\n    preId = 'PREX:' + id\r\n    html = elem.innerHTML\r\n    attributes = {}\r\n    #get scope using id\r\n    realElem = elements.filter((myelem) -> (myelem.id is id) or (myelem.id is preId))[index]\r\n    scope = scopes[realElem?.scope]\r\n    scope?.$phase = 'prerender'\r\n    if not (realElem or scope)\r\n      preElements.push\r\n        id: 'UNKNOWN@' + id\r\n      return\r\n    #get .pre scopes\r\n    for attr in elem.getAttributeNames()\r\n      attributes[attr] = elem.getAttribute attr\r\n      if attrComponent = components[attr.toUpperCase()]\r\n        myscopes = await attrComponent.pre scope, elem, getProps(elem) if typeof(attrComponent.pre) is 'function'\r\n        if typeof(myscopes) isnt 'undefined'\r\n          if myscopes\r\n            if myscopes.length\r\n              i = myscopes.length\r\n              while i-- > 0\r\n                myscopes[i].$parent.$children.splice myscopes[i].$parent.$children.indexOf myscopes[i], 1\r\n                clone = elem.cloneNode()\r\n                clone.innerHTML = elem.innerHTML\r\n                clone.removeAttribute attr\r\n                elem.parentNode.insertBefore clone, elem.nextSibling\r\n                await preRender clone, root, i - 1, preElements\r\n              elem.parentNode.removeChild elem\r\n            else\r\n              if myscopes.length is 0\r\n                preElements.push\r\n                  id: 'UNKNOWN@H1:H1@' + makeId(elem.parentNode, root)\r\n                elem.parentNode.removeChild elem\r\n                return\r\n    #  preRender pre stuff\r\n    #get component\r\n    if component = components[elem.tagName]\r\n      elem.innerHTML = if component.template then component.template else html\r\n      elem.innerHTML = elem.innerHTML.replace '<children></children>', html\r\n    #render component\r\n    #push to preElements\r\n    preElements.push\r\n      id: id\r\n    #preRenderChildren\r\n    await preRenderChildren elem, root, preElements\r\n  fillVars = ->\r\n    i = elements.length\r\n    while i-- > 0\r\n      for name in elements[i].elem.getAttributeNames()\r\n        if /\\{\\{/.test (val = elements[i].elem.getAttribute(name))\r\n          elements[i].elem.setAttribute name, fillTemplate(val, scopes[elements[i].scope])\r\n    i = elements.length\r\n    while i-- > 0\r\n      for node in elements[i].elem.childNodes\r\n        if node.nodeType is document.TEXT_NODE and /\\{\\{/.test node.data\r\n          node.replaceWith fillTemplate node.data, scopes[elements[i].scope]\r\n  checkAttrs = ->\r\n    for elem in elements\r\n      if elem.elem.getAttribute 'checkattrs'\r\n        elem.elem.removeAttribute 'checkattrs'\r\n        for attr in elem.elem.getAttributeNames()\r\n          if attrComponent = components[attr.toUpperCase()]\r\n            attrFn = attrComponent.post or attrComponent\r\n            attrFn scopes[elem.scope], elem.elem, getProps(elem.elem) if typeof(attrFn) is 'function'\r\n            elem.elem.removeAttribute attr\r\n\r\n  getService = (name) ->\r\n    if service = services[name]\r\n      return service\r\n    else if component = components[name.toUpperCase()]\r\n      services[name] =\r\n        fn: (component.service or component)()\r\n        scopes: []\r\n      return services[name]\r\n    null\r\n\r\n  appName: appName\r\n  render: (elem, scope) ->\r\n    if not bootstrapped\r\n      await callbacks.$call 'bootstrap'\r\n      bootstrapped = true\r\n    elem = elem or document.querySelector('[app=' + appName + ']')\r\n    rootElem = rootElem or elem\r\n    scope = scope or Scope()\r\n    await render elem, scope\r\n    await fillVars()\r\n    await checkAttrs()\r\n    callbacks.$call 'rendered'\r\n  $renderChildren: (elem, scope) ->\r\n    await renderChildren elem, scope\r\n    await fillVars()\r\n    await checkAttrs()\r\n    callbacks.$call 'renderedChildren'\r\n  component: (nameOrObj, fn) ->\r\n    if typeof(nameOrObj) is 'object'\r\n      for name, fn of nameOrObj\r\n        components[name.toUpperCase()] = fn @\r\n        @.$appendStyles components[name.toUpperCase()].styles\r\n    else\r\n      components[nameOrObj.toUpperCase()] = fn @\r\n      @.$appendStyles components[nameOrObj.toUpperCase()].styles\r\n    @\r\n  Scope: Scope\r\n  Callbacks: Callbacks\r\n  $getComponents: ->\r\n    components\r\n  $getElements: ->\r\n    elements\r\n  $getServices: ->\r\n    services\r\n  $getScopes: ->\r\n    scopes\r\n  $eval: evalInContext\r\n  $offset: offset\r\n  $setScopeVar: setScopeVar\r\n  $getScopeVar: getScopeVar\r\n  $getElement: getElement\r\n  $getProps: getProps\r\n  $teardown: teardown\r\n  $teardownChildren: teardownChildren\r\n  $on: callbacks.$on\r\n  $once: callbacks.$once\r\n  $off: callbacks.$off\r\n  $hash: hash\r\n  $hashObject: hashObject\r\n  $makeId: makeId\r\n  $addClass: (elem, classNames) ->\r\n    classNames = [classNames] if typeof(classNames) is 'string'\r\n    for className in classNames\r\n      @.$removeClass elem, className\r\n      elem.className += ' ' + className\r\n    null\r\n  $removeClass: (elem, classNames) ->\r\n    classNames = [classNames] if typeof(classNames) is 'string'\r\n    for className in classNames\r\n      r = new RegExp '\\\\s*\\\\b' + className + '\\\\b', 'g'\r\n      elem.className = elem.className.replace r, ''\r\n    null\r\n  $update: (serviceName) ->\r\n    if service = getService serviceName\r\n      updateScopes service.scopes\r\n  $appendStyles: (stylesText) ->\r\n    return if not stylesText\r\n    styles = document.createElement 'style'\r\n    styles.innerText = stylesText.replace(/\\n/gi,'')\r\n    document.querySelector 'head'\r\n    .append styles\r\nmodule.exports = Yma\r\n"
  ]
}