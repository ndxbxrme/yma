{
  "version": 3,
  "file": "index.js",
  "sourceRoot": "..",
  "sources": [
    "src\\index.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;AAAA,MAAA,SAAA,EAAA,GAAA,EAAA,IAAA,EAAA,UAAA,EAAA;;EAAA,IAAA,GAAO,QAAA,CAAC,KAAD,EAAQ,GAAR,CAAA;WACL,QAAA,CAAS,CAAC,IAAI,IAAJ,CAAA,CAAU,CAAC,OAAX,CAAA,CAAA,GAAuB,IAAI,IAAJ,CAAS,IAAT,EAAc,CAAd,EAAgB,CAAhB,CAAkB,CAAC,OAAnB,CAAA,CAAxB,CAAqD,CAAC,QAAtD,CAAA,CAAgE,CAAC,MAAjE,CAAwE,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,CAAA,CAAA,GAAgB,CAAC,IAAA,IAAQ,GAAT,CAA3B,CAAxE,CAAkH,CAAC,KAAnH,CAAyH,EAAzH,CAA4H,CAAC,OAA7H,CAAA,CAAsI,CAAC,IAAvI,CAA4I,EAA5I,CAAT,CAAyJ,CAAC,QAA1J,CAAmK,KAAA,IAAS,EAA5K;EADK;;EAEP,IAAA,GAAO,QAAA,CAAC,GAAD,CAAA;AACP,QAAA,CAAA,EAAA;IAAE,IAAG,OAAO,GAAP,KAAc,WAAjB;AACE,aAAO,EADT;;IAEA,CAAA,GAAI;IACJ,CAAA,GAAI,GAAG,CAAC;AACR,WAAM,CAAN;MACE,CAAA,GAAI,CAAC,CAAA,GAAI,EAAL,CAAA,GAAW,GAAG,CAAC,UAAJ,CAAe,EAAE,CAAjB;IADjB;WAEA;EAPK;;EAQP,UAAA,GAAa,QAAA,CAAC,GAAD,CAAA;AACb,QAAA,MAAA,EAAA,GAAA,EAAA;IAAE,MAAA,GAAS,CAAA;IACT,KAAA,UAAA;;MACE,IAAY,KAAK,CAAC,IAAN,CAAW,GAAX,CAAZ;AAAA,iBAAA;;MACA,MAAM,CAAC,GAAD,CAAN,GAAc,IAAA,CAAK,IAAI,CAAC,SAAL,CAAe,GAAf,CAAL;IAFhB;WAGA;EALW;;EAMb,SAAA,GAAY,QAAA,CAAA,CAAA;AACZ,QAAA;IAAE,SAAA,GAAY,CAAA;WACZ;MAAA,GAAA,EAAK,QAAA,CAAC,IAAD,EAAO,EAAP,CAAA;QACH,SAAS,CAAC,IAAD,CAAT,GAAkB,SAAS,CAAC,IAAD,CAAT,IAAmB;eACrC,SAAS,CAAC,IAAD,CAAM,CAAC,IAAhB,CAAqB,EAArB;MAFG,CAAL;MAGA,IAAA,EAAM,QAAA,CAAC,IAAD,EAAO,EAAP,CAAA;QACJ,SAAS,CAAC,IAAD,CAAT,GAAkB,SAAS,CAAC,IAAD,CAAT,IAAmB;eACrC,SAAS,CAAC,IAAD,CAAM,CAAC,MAAhB,CAAuB,SAAS,CAAC,IAAD,CAAM,CAAC,OAAhB,CAAwB,EAAxB,CAAvB,EAAoD,CAApD;MAFI,CAHN;MAMA,KAAA,EAAO,MAAA,QAAA,CAAC,IAAD,EAAO,IAAP,CAAA;AACT,YAAA,EAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA;QAAI,IAAG,SAAS,CAAC,IAAD,CAAZ;AACE;AAAA;UAAA,KAAA,qCAAA;;yBACE,CAAA,MAAM,EAAA,CAAG,IAAH,CAAN;UADF,CAAA;yBADF;;MADK;IANP;EAFU;;EAYZ,GAAA,GAAM,QAAA,CAAC,OAAD,CAAA;AACN,QAAA,KAAA,EAAA,YAAA,EAAA,SAAA,EAAA,UAAA,EAAA,UAAA,EAAA,QAAA,EAAA,aAAA,EAAA,YAAA,EAAA,QAAA,EAAA,QAAA,EAAA,MAAA,EAAA,WAAA,EAAA,SAAA,EAAA,iBAAA,EAAA,MAAA,EAAA,cAAA,EAAA,QAAA,EAAA,MAAA,EAAA,QAAA,EAAA,QAAA,EAAA,gBAAA,EAAA;IAAE,QAAA,GAAW;IACX,MAAA,GAAS,QAAA,CAAC,IAAD,EAAO,IAAP,CAAA;AACX,UAAA,EAAA,EAAA;MAAI,IAAA,GAAO,IAAA,IAAQ;MACf,IAAiB,IAAA,KAAQ,IAAzB;AAAA,eAAO,OAAP;;MACA,EAAA,GAAK;AACL,aAAM,IAAA,KAAU,IAAhB;QACE,EAAA,IAAM,IAAI,CAAC,OAAL,GAAe;QACrB,MAAA,GAAS;AACT,eAAM,MAAM,CAAC,eAAb;UACE,EAAA,IAAM,MAAM,CAAC,OAAP,GAAiB;UACvB,MAAA,GAAS,MAAM,CAAC;QAFlB;QAGA,IAAA,GAAO,IAAI,CAAC;MANd;aAOA;IAXO;IAYT,aAAA,GAAgB,QAAA,CAAC,GAAD,EAAM,OAAN,CAAA;AACd;eACE,CAAC,IAAI,QAAJ,CAAa,CAAA,mBAAA,CAAA,CAAsB,GAAtB,CAAA,CAAA,CAAb,CAAD,CACA,CAAC,IADD,CACM,OADN,EADF;OAAA;IADc;IAIhB,YAAA,GAAe,QAAA,CAAC,QAAD,EAAW,KAAX,CAAA;aACb,QAAQ,CAAC,OAAT,CAAiB,gBAAjB,EAAmC,QAAA,CAAC,GAAD,EAAM,UAAN,CAAA;eACjC,aAAA,CAAc,UAAd,EAA0B,KAA1B,CAAA,IAAoC;MADH,CAAnC;IADa;IAGf,UAAA,GAAa,CAAA;IACb,QAAA,GAAW;IACX,MAAA,GAAS,CAAA;IACT,QAAA,GAAW,CAAA;IACX,SAAA,GAAY,SAAA,CAAA;IACZ,YAAA,GAAe;IACf,WAAA,GAAc,QAAA,CAAC,KAAD,EAAQ,KAAR,CAAA;AAChB,UAAA,GAAA,EAAA,OAAA,EAAA;AAAI;MAAA,KAAA,YAAA;;QACE,IAAG,CAAI,KAAK,CAAC,IAAN,CAAW,GAAX,CAAP;uBACE,KAAK,CAAC,GAAD,CAAL,GAAa,KADf;SAAA,MAAA;+BAAA;;MADF,CAAA;;IADY;IAId,YAAA,GAAe,MAAA,QAAA,CAAA,CAAA;AACjB,UAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA;AAAI;MAAA,KAAA,YAAA;;QACE,UAAA,GAAa,QAAQ,CAAC,MAAT,CAAgB,QAAA,CAAC,OAAD,CAAA;iBAAa,OAAO,CAAC,KAAR,KAAiB;QAA9B,CAAhB;QACb,IAAG,UAAU,CAAC,MAAX,KAAqB,CAAxB;;eACe,CAAE,SAAS,CAAC,MAAzB,sCAA6C,CAAE,SAAS,CAAC,OAAzB,CAAiC,EAAjC,UAAhC,EAAsE,CAAtE;;UACA,MAAM,KAAK,CAAC,KAAN,CAAY,UAAZ,EADd;;uBAGQ,OAAO,MAAM,CAAC,KAAK,CAAC,GAAP,GAJf;SAAA,MAAA;+BAAA;;MAFF,CAAA;;IADa;IAQf,QAAA,GAAW,MAAA,QAAA,CAAC,EAAD,CAAA;AACb,UAAA;MAAI,CAAA,GAAI,IAAI,MAAJ,CAAW,EAAA,GAAK,GAAhB;MACJ,QAAA,GAAW,QAAQ,CAAC,MAAT,CAAgB,QAAA,CAAC,OAAD,CAAA;eACzB,CAAI,CAAC,CAAC,IAAF,CAAO,OAAO,CAAC,EAAf;MADqB,CAAhB;aAEX,CAAA,MAAM,YAAA,CAAA,CAAN;IAJS;IAKX,gBAAA,GAAmB,MAAA,QAAA,CAAC,EAAD,CAAA;AACrB,UAAA;MAAI,CAAA,GAAI,IAAI,MAAJ,CAAW,IAAA,GAAO,EAAP,GAAY,GAAvB;MACJ,QAAA,GAAW,QAAQ,CAAC,MAAT,CAAgB,QAAA,CAAC,OAAD,CAAA;eACzB,CAAI,CAAC,CAAC,IAAF,CAAO,OAAO,CAAC,EAAf;MADqB,CAAhB;aAEX,CAAA,MAAM,YAAA,CAAA,CAAN;IAJiB;IAMnB,KAAA,GAAQ,QAAA,CAAC,KAAD,CAAA;AACV,UAAA,SAAA,EAAA,QAAA,EAAA,cAAA,EAAA;MAAI,cAAA,GAAiB,SAAA,CAAA;MACjB,QAAA,GAAW;MACX,SAAA,GAAY;MACZ,QAAA,GACE;QAAA,GAAA,EAAK,IAAA,CAAA,CAAL;QACA,SAAA,EAAW,EADX;QAEA,OAAA,EAAS,IAFT;QAGA,OAAA,EAAS,MAAA,QAAA,CAAC,OAAD,EAAU,IAAV,CAAA;AACf,cAAA,MAAA,EAAA,OAAA,EAAA,aAAA,EAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,WAAA,EAAA,OAAA,EAAA,QAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,gBAAA,EAAA,QAAA,EAAA,WAAA,EAAA;UAAQ,OAAA,GAAU;AACV,iBAAM,OAAO,CAAC,OAAd;YACE,KAAA,cAAA;cACE,IAAG,OAAO,OAAO,CAAC,GAAD,CAAd,KAA0B,WAA7B;gBACE,gBAAA,GAAmB,OAAO,CAAC,GAAD,CAAP,2CAA+B,CAAE,GAAF;gBAClD,OAAO,CAAC,GAAD,CAAP,GAAe,OAAO,CAAC,GAAD;gBACtB,IAAuB,CAAI,gBAA3B;kBAAA,OAAO,OAAO,CAAC,GAAD,EAAd;iBAHF;eAAA,MAAA;gBAKE,OAAO,OAAO,CAAC,GAAD,EALhB;;YADF;YAQA,OAAA,GAAU,OAAO,CAAC;UATpB;UAUA,aAAA,GAAgB,MAAM,CAAC,MAAP,CAAc,MAAd,CAAqB,CAAC,MAAtB,CAA6B,QAAA,CAAC,KAAD,CAAA;mBAAY,IAAI,CAAC,SAAL,CAAe,KAAK,CAAC,KAArB,CAAA,KAAiC,IAAI,CAAC,SAAL,CAAe,UAAA,CAAW,KAAX,CAAf;UAA7C,CAA7B;UAChB,KAAA,GAAQ;AACR,iBAAM,aAAa,CAAC,MAAd,GAAuB,KAAA,GAAQ,CAArC;YACE,CAAA,GAAI,aAAa,CAAC;AAClB,mBAAM,CAAA,EAAA,GAAM,KAAZ;cACE,IAAG,aAAa,CAAC,CAAD,CAAG,CAAC,eAAjB,CAAiC,aAAa,CAAC,CAAD,CAA9C,CAAH;gBACE,aAAa,CAAC,MAAd,CAAqB,CAArB,EAAwB,CAAxB;AACA,yBAFF;;cAGA,IAAG,aAAa,CAAC,CAAD,CAAG,CAAC,aAAjB,CAA+B,aAAa,CAAC,CAAD,CAA5C,CAAH;gBACE,aAAa,CAAC,CAAD,CAAb,GAAmB,aAAa,CAAC,CAAD;gBAChC,aAAa,CAAC,MAAd,CAAqB,CAArB,EAAwB,CAAxB;AACA,yBAHF;;YAJF;YAQA,KAAA;UAVF;UAWA,WAAA,GAAc,QAAA,CAAC,KAAD,EAAQ,WAAR,CAAA;AACtB,gBAAA,UAAA,EAAA,CAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA;YAAU,MAAA,GAAS,UAAA,CAAW,KAAX;YACT,KAAA,aAAA;;cACE,IAAG,GAAA,yCAAoB,CAAE,GAAF,WAAvB;gBACE,IAAG,OAAO,WAAW,CAAC,GAAD,CAAlB,KAA8B,WAAjC;kBACE,WAAW,CAAC,GAAD,CAAX,GAAmB,KAAK,CAAC,GAAD,EAD1B;iBADF;eAAA,MAAA;gBAIE,IAAG,OAAO,WAAW,CAAC,GAAD,CAAlB,KAA8B,WAAjC;kBACE,KAAK,CAAC,GAAD,CAAL,GAAa,WAAW,CAAC,GAAD,EAD1B;iBAJF;;YADF;YAOA,KAAK,CAAC,KAAN,GAAc;AACd;AAAA;YAAA,KAAA,sCAAA;;2BACE,WAAA,CAAY,UAAZ,EAAwB,WAAxB;YADF,CAAA;;UAVY;UAYd,OAAA,GAAU,QAAQ,CAAC,aAAT,CAAuB,KAAvB;UACV,WAAA,GAAc;UACd,QAAA,GAAW,QAAQ,CAAC,CAAD;UACnB,OAAO,CAAC,SAAR,GAAoB,QAAQ,CAAC;UAC7B,MAAM,SAAA,CAAU,OAAV,EAAmB,OAAnB,EAA4B,CAA5B,EAA+B,WAA/B;UACN,QAAA,GAAW,WAAW,CAAC,MAAZ,CAAmB,QAAA,CAAC,OAAD,CAAA;mBAAa,WAAW,CAAC,IAAZ,CAAiB,OAAO,CAAC,EAAzB;UAAb,CAAnB;UACX,aAAA,GAAgB;UAChB,QAAQ,CAAC,OAAT,CAAiB,QAAA,CAAC,OAAD,CAAA;AACzB,gBAAA;YAAU,QAAA,GAAW,OAAO,CAAC,EAAE,CAAC,OAAX,CAAmB,qBAAnB,EAA0C,EAA1C;YACX,IAA+B,CAAI,aAAa,CAAC,QAAd,CAAuB,QAAvB,CAAnC;qBAAA,aAAa,CAAC,IAAd,CAAmB,QAAnB,EAAA;;UAFe,CAAjB;UAGA,KAAA,+CAAA;;YACE,OAAA,GAAU,QAAQ,CAAC,MAAT,CAAgB,QAAA,CAAC,OAAD,CAAA;qBAAa,OAAO,CAAC,EAAR,KAAc;YAA3B,CAAhB,CAAkD,CAAC,CAAD;YAC5D,IAAG,OAAH;cACE,KAAA,GAAQ,MAAM,CAAC,OAAO,CAAC,KAAT;cACd,MAAM,gBAAA,CAAiB,MAAjB;cACN,OAAO,CAAC,IAAI,CAAC,SAAb,GAAyB,OAAO,CAAC;cACjC,MAAM,cAAA,CAAe,OAAO,CAAC,IAAvB,EAA6B,KAA7B,EAJR;;UAFF;UAOA,KAAA,GAAQ,QAAA,CAAC,KAAD,CAAA;AAChB,gBAAA,UAAA,EAAA,IAAA,EAAA,YAAA,EAAA,CAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,CAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,CAAA,EAAA;YAAU,YAAA,GAAe,QAAQ,CAAC,MAAT,CAAgB,QAAA,CAAC,OAAD,CAAA;qBAC7B,OAAO,CAAC,KAAR,KAAiB,KAAK,CAAC;YADM,CAAhB;YAEf,KAAA,gDAAA;;cACE,CAAA,GAAI;AACJ;cAAA,KAAA,wCAAA;;gBACE,IAAG,IAAI,CAAC,QAAL,KAAiB,QAAQ,CAAC,SAA7B;kBACE,IAAI,CAAC,WAAL,CAAiB,IAAI,CAAC,SAAS,CAAC,CAAA,EAAD,CAAd,IAAuB,EAAxC,EADF;;cADF;AAGA;cAAA,KAAA,YAAA;;gBACE,IAAI,CAAC,IAAI,CAAC,YAAV,CAAuB,IAAvB,EAA6B,GAA7B;cADF;YALF;AAOA;AAAA;YAAA,KAAA,wCAAA;;2BAAA,KAAA,CAAM,UAAN;YAAA,CAAA;;UAVM;UAWR,CAAA,GAAI,aAAa,CAAC;AAClB,iBAAM,CAAA,EAAA,GAAM,CAAZ;YACE,WAAA,CAAY,aAAa,CAAC,CAAD,CAAzB,EAA8B,CAAA,CAA9B;YACA,KAAA,CAAM,aAAa,CAAC,CAAD,CAAnB;YACA,MAAM,aAAa,CAAC,CAAD,CAAG,CAAC,aAAjB,CAA+B,QAA/B;UAHR;UAIA,MAAM,QAAA,CAAA;UACN,MAAM,UAAA,CAAA;UACN,OAAA,GAAU;QAxEH,CAHT;QA6EA,IAAA,EAAM,QAAA,CAAC,IAAD,CAAA;AACZ,cAAA,SAAA,EAAA;UAAQ,IAAG,OAAA,GAAU,QAAQ,CAAC,IAAD,CAArB;YACE,IAAC,CAAC,IAAD,CAAD,GAAU,OAAO,CAAC;YAClB,OAAO,CAAC,MAAM,CAAC,IAAf,CAAoB,IAAC,CAAC,GAAtB,EAFF;WAAA,MAGK,IAAG,SAAA,GAAY,UAAU,CAAC,IAAI,CAAC,WAAL,CAAA,CAAD,CAAzB;YACH,QAAQ,CAAC,IAAD,CAAR,GACE;cAAA,EAAA,EAAI,CAAC,SAAS,CAAC,OAAV,IAAqB,SAAtB,CAAA,CAAA,CAAJ;cACA,MAAA,EAAQ,CAAC,IAAC,CAAC,GAAH;YADR;YAEF,IAAC,CAAC,IAAD,CAAD,GAAU,QAAQ,CAAC,IAAD,CAAM,CAAC,GAJtB;;iBAKL,IAAC,CAAC,GAAF,CAAM,UAAN,EAAkB,QAAA,CAAA,CAAA;mBAChB,QAAQ,CAAC,IAAD,CAAM,CAAC,MAAM,CAAC,MAAtB,CAA6B,QAAQ,CAAC,IAAD,CAAM,CAAC,MAAM,CAAC,OAAtB,CAA8B,IAAC,CAAC,GAAhC,CAA7B,EAAmE,CAAnE;UADgB,CAAlB;QATI,CA7EN;QAwFA,GAAA,EAAK,cAAc,CAAC,GAxFpB;QAyFA,IAAA,EAAM,cAAc,CAAC,IAzFrB;QA0FA,KAAA,EAAO,cAAc,CAAC,KA1FtB;QA2FA,aAAA,EAAe,MAAA,QAAA,CAAC,IAAD,EAAO,IAAP,CAAA;AACrB,cAAA,UAAA,EAAA,CAAA,EAAA,GAAA,EAAA;UAAQ,MAAM,cAAc,CAAC,KAAf,CAAqB,IAArB,EAA2B,IAA3B;AACN;UAAA,KAAA,qCAAA;;YACE,MAAM,UAAU,CAAC,aAAX,CAAyB,IAAzB,EAA+B,IAA/B;UADR;iBAEA;QAJa,CA3Ff;QAgGA,eAAA,EAAiB,QAAA,CAAC,KAAD,CAAA;AACvB,cAAA;UAAQ,IAAgB,KAAK,CAAC,GAAN,KAAa,IAAC,CAAC,GAA/B;AAAA,mBAAO,MAAP;;UACA,OAAA,GAAU;AACV,iBAAM,OAAO,CAAC,OAAd;YACE,IAAe,OAAO,CAAC,GAAR,KAAe,KAAK,CAAC,GAApC;AAAA,qBAAO,KAAP;;YACA,OAAA,GAAU,OAAO,CAAC;UAFpB;iBAGA;QANe,CAhGjB;QAuGA,aAAA,EAAe,QAAA,CAAC,KAAD,CAAA;AACrB,cAAA;UAAQ,IAAgB,KAAK,CAAC,GAAN,KAAa,IAAC,CAAC,GAA/B;AAAA,mBAAO,MAAP;;UACA,KAAA,GAAQ,QAAA,CAAC,OAAD,CAAA;AAChB,gBAAA,UAAA,EAAA,CAAA,EAAA,GAAA,EAAA;YAAU,IAAe,OAAO,CAAC,GAAR,KAAe,KAAK,CAAC,GAApC;AAAA,qBAAO,KAAP;;AACA;YAAA,KAAA,qCAAA;;cACE,IAAe,KAAA,CAAM,UAAN,CAAf;AAAA,uBAAO,KAAP;;YADF;mBAEA;UAJM;iBAKR,KAAA,CAAM,KAAN;QAPa,CAvGf;QA+GA,QAAA,EAAU,QAAA,CAAC,EAAD,EAAK,KAAL,CAAA;UACR,IAAG,QAAQ,CAAC,MAAT,KAAmB,CAAtB;YACE,cAAc,CAAC,GAAf,CAAmB,UAAnB,EAA+B,QAAA,CAAA,CAAA;AACzC,kBAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA;AAAY;cAAA,KAAA,0CAAA;;6BACE,MAAM,CAAC,YAAP,CAAoB,OAApB;cADF,CAAA;;YAD6B,CAA/B,EADF;;iBAIA,QAAQ,CAAC,IAAT,CAAc,MAAM,CAAC,UAAP,CAAkB,EAAlB,EAAsB,KAAtB,CAAd;QALQ,CA/GV;QAqHA,SAAA,EAAW,QAAA,CAAC,EAAD,EAAK,KAAL,CAAA;UACT,IAAG,SAAS,CAAC,MAAV,KAAoB,CAAvB;YACE,cAAc,CAAC,GAAf,CAAmB,UAAnB,EAA+B,QAAA,CAAA,CAAA;AACzC,kBAAA,QAAA,EAAA,CAAA,EAAA,GAAA,EAAA;AAAY;cAAA,KAAA,2CAAA;;6BACE,MAAM,CAAC,YAAP,CAAoB,QAApB;cADF,CAAA;;YAD6B,CAA/B,EADF;;iBAIA,SAAS,CAAC,IAAV,CAAe,MAAM,CAAC,UAAP,CAAkB,EAAlB,EAAsB,KAAtB,CAAf;QALS;MArHX;MA2HF,IAAG,KAAA,IAAU,KAAK,CAAC,GAAnB;QACE,KAAK,CAAC,SAAS,CAAC,IAAhB,CAAqB,QAArB;QACA,QAAQ,CAAC,OAAT,GAAmB,MAFrB;;MAGA,WAAA,CAAY,QAAZ,EAAsB,KAAtB;aACA;IApIM;IAqIR,QAAA,GAAW,QAAA,CAAC,IAAD,CAAA;AACb,UAAA;MAAI,OAAA,GAAU,CAAA;MACV,IAAI,CAAC,iBAAL,CAAA,CAAwB,CAAC,OAAzB,CAAiC,QAAA,CAAC,IAAD,CAAA;eAAU,OAAO,CAAC,IAAD,CAAP,GAAgB,IAAI,CAAC,YAAL,CAAkB,IAAlB;MAA1B,CAAjC;aACA;IAHS;IAIX,cAAA,GAAiB,MAAA,QAAA,CAAC,IAAD,EAAO,KAAP,CAAA;AACnB,UAAA,KAAA,EAAA,QAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA;MAAI,QAAA,GAAW;AACX;MAAA,KAAA,qCAAA;;QAAA,QAAQ,CAAC,IAAT,CAAc,KAAd;MAAA;AACA;MAAA,KAAA,4CAAA;;qBAAA,CAAA,MAAM,MAAA,CAAO,KAAP,EAAc,KAAd,CAAN;MAAA,CAAA;;IAHe;IAIjB,MAAA,GAAS,MAAA,QAAA,CAAC,IAAD,EAAO,KAAP,CAAA;AACX,UAAA,IAAA,EAAA,aAAA,EAAA,UAAA,EAAA,KAAA,EAAA,SAAA,EAAA,IAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,IAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,EAAA;MAAI,KAAA,GAAQ;MACR,MAAM,CAAC,KAAK,CAAC,GAAP,CAAN,GAAoB;MACpB,KAAK,CAAC,KAAN,GAAc,UAAA,CAAW,KAAX;MACd,KAAK,CAAC,KAAN,CAAY,WAAZ;MACA,IAAA,GAAO,IAAI,CAAC;MACZ,SAAA,GAAY;MACZ,UAAA,GAAa,CAAA;AACb;MAAA,KAAA,qCAAA;;QACE,IAA4B,IAAI,CAAC,QAAL,KAAiB,QAAQ,CAAC,SAAtD;UAAA,SAAS,CAAC,IAAV,CAAe,IAAI,CAAC,IAApB,EAAA;;MADF;AAEA;MAAA,KAAA,wCAAA;;QACE,UAAU,CAAC,IAAD,CAAV,GAAmB,IAAI,CAAC,YAAL,CAAkB,IAAlB;QACnB,IAAG,aAAA,GAAgB,UAAU,CAAC,IAAI,CAAC,WAAL,CAAA,CAAD,CAA7B;UACE,IAAkE,OAAO,aAAa,CAAC,GAArB,KAA6B,UAA/F;YAAA,QAAA,GAAW,CAAA,MAAM,aAAa,CAAC,GAAd,CAAkB,KAAlB,EAAyB,IAAzB,EAA+B,QAAA,CAAS,IAAT,CAA/B,CAAN,EAAX;;UACA,IAAG,OAAO,QAAP,KAAsB,WAAzB;YACE,IAAI,CAAC,eAAL,CAAqB,IAArB;YACA,KAAA,GAAQ,OAAA,GAAU,MAAA,CAAO,IAAP;YAClB,IAAG,QAAH;cACE,IAAG,QAAQ,CAAC,MAAZ;gBACE,CAAA,GAAI,QAAQ,CAAC;AACb,uBAAM,CAAA,EAAA,GAAM,CAAZ;kBACE,KAAA,GAAQ,IAAI,CAAC,SAAL,CAAA;kBACR,KAAK,CAAC,SAAN,GAAkB,IAAI,CAAC;kBACvB,IAAI,CAAC,UAAU,CAAC,YAAhB,CAA6B,KAA7B,EAAoC,IAAI,CAAC,WAAzC;kBACA,MAAA,CAAO,KAAP,EAAc,QAAQ,CAAC,CAAD,CAAtB;gBAJF;gBAKA,IAAI,CAAC,UAAU,CAAC,WAAhB,CAA4B,IAA5B,EAPF;eAAA,MAAA;gBASE,IAAoC,QAAQ,CAAC,MAAT,KAAmB,CAAvD;kBAAA,IAAI,CAAC,UAAU,CAAC,WAAhB,CAA4B,IAA5B,EAAA;iBATF;eADF;aAHF;WADR;;UAgBQ,IAAI,CAAC,YAAL,CAAkB,YAAlB,EAAgC,IAAhC,EAjBF;;MAFF;MAoBA,IAAG,SAAA,GAAY,UAAU,CAAC,IAAI,CAAC,OAAN,CAAzB;QACE,QAAA,GAAW,KAAA,CAAM,KAAN;QACX,KAAA,GAAQ;QACR,MAAM,CAAC,KAAK,CAAC,GAAP,CAAN,GAAoB;QACpB,IAAoC,SAAS,CAAC,UAA9C;UAAA,SAAS,CAAC,UAAV,CAAqB,KAArB,EAA4B,IAA5B,EAAA;;QACA,KAAK,CAAC,KAAN,GAAc,UAAA,CAAW,KAAX;QACd,IAAI,CAAC,SAAL,GAAoB,SAAS,CAAC,QAAb,GAA2B,SAAS,CAAC,QAArC,GAAmD;QACpE,IAAI,CAAC,SAAL,GAAiB,IAAI,CAAC,SAAS,CAAC,OAAf,CAAuB,uBAAvB,EAAgD,IAAhD,EAPnB;;MAQA,QAAQ,CAAC,IAAT,CACE;QAAA,EAAA,EAAI,KAAA,IAAS,MAAA,CAAO,IAAP,CAAb;QACA,IAAA,EAAM,IADN;QAEA,KAAA,EAAO,KAAK,CAAC,GAFb;QAGA,IAAA,EAAM,IAHN;QAIA,SAAA,EAAW,SAJX;QAKA,UAAA,EAAY;MALZ,CADF;aAOA,CAAA,MAAM,cAAA,CAAe,IAAf,EAAqB,KAArB,CAAN;IA7CO;IA+CT,iBAAA,GAAoB,MAAA,QAAA,CAAC,IAAD,EAAO,IAAP,EAAa,WAAb,CAAA;AACtB,UAAA,KAAA,EAAA,QAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA;MAAI,QAAA,GAAW;AACX;MAAA,KAAA,qCAAA;;QAAA,QAAQ,CAAC,IAAT,CAAc,KAAd;MAAA;AACA;MAAA,KAAA,4CAAA;;qBAAA,CAAA,MAAM,SAAA,CAAU,KAAV,EAAiB,IAAjB,EAAuB,CAAvB,EAA0B,WAA1B,CAAN;MAAA,CAAA;;IAHkB;IAIpB,SAAA,GAAY,MAAA,QAAA,CAAC,IAAD,EAAO,IAAP,EAAa,KAAb,EAAoB,WAApB,CAAA;AACd,UAAA,IAAA,EAAA,aAAA,EAAA,UAAA,EAAA,KAAA,EAAA,SAAA,EAAA,IAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,GAAA,EAAA,QAAA,EAAA,KAAA,EAAA,QAAA,EAAA,GAAA,EAAA;MAAI,EAAA,GAAK,MAAA,CAAO,IAAP,EAAa,IAAb;MACL,KAAA,GAAQ,OAAA,GAAU;MAClB,IAAA,GAAO,IAAI,CAAC;MACZ,UAAA,GAAa,CAAA,EAHjB;;MAKI,QAAA,GAAW,QAAQ,CAAC,MAAT,CAAgB,QAAA,CAAC,MAAD,CAAA;eAAY,CAAC,MAAM,CAAC,EAAP,KAAa,EAAd,CAAA,IAAqB,CAAC,MAAM,CAAC,EAAP,KAAa,KAAd;MAAjC,CAAhB,CAAsE,CAAC,KAAD;MACjF,KAAA,GAAQ,MAAM,oBAAC,QAAQ,CAAE,cAAX;MACd,IAAG,CAAI,CAAC,QAAA,IAAY,KAAb,CAAP;QACE,WAAW,CAAC,IAAZ,CACE;UAAA,EAAA,EAAI,UAAA,GAAa;QAAjB,CADF;AAEA,eAHF;;AAKA;;MAAA,KAAA,qCAAA;;QACE,UAAU,CAAC,IAAD,CAAV,GAAmB,IAAI,CAAC,YAAL,CAAkB,IAAlB;QACnB,IAAG,aAAA,GAAgB,UAAU,CAAC,IAAI,CAAC,WAAL,CAAA,CAAD,CAA7B;UACE,IAAkE,OAAO,aAAa,CAAC,GAArB,KAA6B,UAA/F;YAAA,QAAA,GAAW,CAAA,MAAM,aAAa,CAAC,GAAd,CAAkB,KAAlB,EAAyB,IAAzB,EAA+B,QAAA,CAAS,IAAT,CAA/B,CAAN,EAAX;;UACA,IAAG,OAAO,QAAP,KAAsB,WAAzB;YACE,IAAG,QAAH;cACE,IAAG,QAAQ,CAAC,MAAZ;gBACE,CAAA,GAAI,QAAQ,CAAC;AACb,uBAAM,CAAA,EAAA,GAAM,CAAZ;kBACE,QAAQ,CAAC,CAAD,CAAG,CAAC,OAAO,CAAC,SAAS,CAAC,MAA9B,CAAqC,QAAQ,CAAC,CAAD,CAAG,CAAC,OAAO,CAAC,SAAS,CAAC,OAA9B,CAAsC,QAAQ,CAAC,CAAD,CAA9C,EAAmD,CAAnD,CAArC;kBACA,KAAA,GAAQ,IAAI,CAAC,SAAL,CAAA;kBACR,KAAK,CAAC,SAAN,GAAkB,IAAI,CAAC;kBACvB,KAAK,CAAC,eAAN,CAAsB,IAAtB;kBACA,IAAI,CAAC,UAAU,CAAC,YAAhB,CAA6B,KAA7B,EAAoC,IAAI,CAAC,WAAzC;kBACA,MAAM,SAAA,CAAU,KAAV,EAAiB,IAAjB,EAAuB,CAAA,GAAI,CAA3B,EAA8B,WAA9B;gBANR;gBAOA,IAAI,CAAC,UAAU,CAAC,WAAhB,CAA4B,IAA5B,EATF;eAAA,MAAA;gBAWE,IAAG,QAAQ,CAAC,MAAT,KAAmB,CAAtB;kBACE,WAAW,CAAC,IAAZ,CACE;oBAAA,EAAA,EAAI,gBAAA,GAAmB,MAAA,CAAO,IAAI,CAAC,UAAZ,EAAwB,IAAxB;kBAAvB,CADF;kBAEA,IAAI,CAAC,UAAU,CAAC,WAAhB,CAA4B,IAA5B;AACA,yBAJF;iBAXF;eADF;aADF;WAFF;;MAFF,CAZJ;;;MAoCI,IAAG,SAAA,GAAY,UAAU,CAAC,IAAI,CAAC,OAAN,CAAzB;QACE,IAAI,CAAC,SAAL,GAAoB,SAAS,CAAC,QAAb,GAA2B,SAAS,CAAC,QAArC,GAAmD;QACpE,IAAI,CAAC,SAAL,GAAiB,IAAI,CAAC,SAAS,CAAC,OAAf,CAAuB,uBAAvB,EAAgD,IAAhD,EAFnB;OApCJ;;;MAyCI,WAAW,CAAC,IAAZ,CACE;QAAA,EAAA,EAAI;MAAJ,CADF,EAzCJ;;aA4CI,CAAA,MAAM,iBAAA,CAAkB,IAAlB,EAAwB,IAAxB,EAA8B,WAA9B,CAAN;IA7CU;IA+CZ,QAAA,GAAW,QAAA,CAAA,CAAA;AACb,UAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,OAAA,EAAA;MAAI,CAAA,GAAI,QAAQ,CAAC;AACb;aAAM,CAAA,EAAA,GAAM,CAAZ;AACE;QAAA,KAAA,qCAAA;;UACE,IAAG,IAAI,CAAC,QAAL,KAAiB,QAAQ,CAAC,SAA1B,IAAwC,MAAM,CAAC,IAAP,CAAY,IAAI,CAAC,IAAjB,CAA3C;YACE,IAAI,CAAC,WAAL,CAAiB,YAAA,CAAa,IAAI,CAAC,IAAlB,EAAwB,MAAM,CAAC,QAAQ,CAAC,CAAD,CAAG,CAAC,KAAb,CAA9B,CAAjB,EADF;;QADF;;;AAGA;AAAA;UAAA,KAAA,wCAAA;;YACE,IAAG,MAAM,CAAC,IAAP,CAAY,CAAC,GAAA,GAAM,QAAQ,CAAC,CAAD,CAAG,CAAC,IAAI,CAAC,YAAjB,CAA8B,IAA9B,CAAP,CAAZ,CAAH;4BACE,QAAQ,CAAC,CAAD,CAAG,CAAC,IAAI,CAAC,YAAjB,CAA8B,IAA9B,EAAoC,YAAA,CAAa,GAAb,EAAkB,MAAM,CAAC,QAAQ,CAAC,CAAD,CAAG,CAAC,KAAb,CAAxB,CAApC,GADF;aAAA,MAAA;oCAAA;;UADF,CAAA;;;MAJF,CAAA;;IAFS;IASX,UAAA,GAAa,QAAA,CAAA,CAAA;AACf,UAAA,IAAA,EAAA,aAAA,EAAA,MAAA,EAAA,IAAA,EAAA,CAAA,EAAA,GAAA,EAAA;AAAI;MAAA,KAAA,0CAAA;;QACE,IAAG,IAAI,CAAC,IAAI,CAAC,YAAV,CAAuB,YAAvB,CAAH;UACE,IAAI,CAAC,IAAI,CAAC,eAAV,CAA0B,YAA1B;;;AACA;AAAA;YAAA,KAAA,uCAAA;;cACE,IAAG,aAAA,GAAgB,UAAU,CAAC,IAAI,CAAC,WAAL,CAAA,CAAD,CAA7B;gBACE,MAAA,GAAS,aAAa,CAAC,IAAd,IAAsB;gBAC/B,IAA6D,OAAO,MAAP,KAAkB,UAA/E;kBAAA,MAAA,CAAO,MAAM,CAAC,IAAI,CAAC,KAAN,CAAb,EAA2B,IAAI,CAAC,IAAhC,EAAsC,QAAA,CAAS,IAAI,CAAC,IAAd,CAAtC,EAAA;;8BACA,IAAI,CAAC,IAAI,CAAC,eAAV,CAA0B,IAA1B,GAHF;eAAA,MAAA;sCAAA;;YADF,CAAA;;gBAFF;SAAA,MAAA;+BAAA;;MADF,CAAA;;IADW;WASb;MAAA,MAAA,EAAQ,MAAA,QAAA,CAAC,IAAD,EAAO,KAAP,CAAA;QACN,IAAG,CAAI,YAAP;UACE,MAAM,SAAS,CAAC,KAAV,CAAgB,WAAhB;UACN,YAAA,GAAe,KAFjB;;QAGA,IAAA,GAAO,IAAA,IAAQ,QAAQ,CAAC,aAAT,CAAuB,OAAA,GAAU,OAAV,GAAoB,GAA3C;QACf,QAAA,GAAW,QAAA,IAAY;QACvB,KAAA,GAAQ,KAAA,IAAS,KAAA,CAAA;QACjB,MAAM,MAAA,CAAO,IAAP,EAAa,KAAb;QACN,MAAM,QAAA,CAAA;QACN,MAAM,UAAA,CAAA;eACN,SAAS,CAAC,KAAV,CAAgB,UAAhB;MAVM,CAAR;MAWA,eAAA,EAAiB,MAAA,QAAA,CAAC,IAAD,EAAO,KAAP,CAAA;QACf,MAAM,cAAA,CAAe,IAAf,EAAqB,KAArB;QACN,MAAM,QAAA,CAAA;QACN,MAAM,UAAA,CAAA;eACN,SAAS,CAAC,KAAV,CAAgB,UAAhB;MAJe,CAXjB;MAgBA,SAAA,EAAW,QAAA,CAAC,SAAD,EAAY,EAAZ,CAAA;AACb,YAAA;QAAI,IAAG,OAAO,SAAP,KAAqB,QAAxB;UACE,KAAA,iBAAA;;YACE,UAAU,CAAC,IAAI,CAAC,WAAL,CAAA,CAAD,CAAV,GAAiC,EAAA,CAAG,IAAH;UADnC,CADF;SAAA,MAAA;UAIE,UAAU,CAAC,SAAS,CAAC,WAAV,CAAA,CAAD,CAAV,GAAsC,EAAA,CAAG,IAAH,EAJxC;;eAKA;MANS,CAhBX;MAuBA,KAAA,EAAO,KAvBP;MAwBA,SAAA,EAAW,SAxBX;MAyBA,cAAA,EAAgB,QAAA,CAAA,CAAA;eACd;MADc,CAzBhB;MA2BA,YAAA,EAAc,QAAA,CAAA,CAAA;eACZ;MADY,CA3Bd;MA6BA,YAAA,EAAc,QAAA,CAAA,CAAA;eACZ;MADY,CA7Bd;MA+BA,UAAA,EAAY,QAAA,CAAA,CAAA;eACV;MADU,CA/BZ;MAiCA,KAAA,EAAO,aAjCP;MAkCA,SAAA,EAAW,QAlCX;MAmCA,SAAA,EAAW,QAnCX;MAoCA,iBAAA,EAAmB,gBApCnB;MAqCA,GAAA,EAAK,SAAS,CAAC,GArCf;MAsCA,IAAA,EAAM,SAAS,CAAC,IAtChB;MAuCA,KAAA,EAAO,IAvCP;MAwCA,WAAA,EAAa,UAxCb;MAyCA,OAAA,EAAS,MAzCT;MA0CA,WAAA,EAAa,QAAA,CAAC,IAAD,CAAA;AACf,YAAA,SAAA,EAAA;QAAI,IAAG,OAAA,GAAU,QAAQ,CAAC,IAAD,CAArB;AACE,iBAAO,OAAO,CAAC,GADjB;SAAA,MAEK,IAAG,SAAA,GAAY,UAAU,CAAC,IAAI,CAAC,WAAL,CAAA,CAAD,CAAzB;UACH,QAAQ,CAAC,IAAD,CAAR,GACE;YAAA,EAAA,EAAI,CAAC,SAAS,CAAC,OAAV,IAAqB,SAAtB,CAAA,CAAA,CAAJ;YACA,MAAA,EAAQ;UADR;AAEF,iBAAO,QAAQ,CAAC,IAAD,CAAM,CAAC,GAJnB;;eAKL;MARW,CA1Cb;MAmDA,SAAA,EAAW,QAAA,CAAC,IAAD,EAAO,UAAP,CAAA;AACb,YAAA,SAAA,EAAA,CAAA,EAAA;QAAI,IAA6B,OAAO,UAAP,KAAsB,QAAnD;UAAA,UAAA,GAAa,CAAC,UAAD,EAAb;;QACA,KAAA,4CAAA;;UACE,IAAC,CAAC,YAAF,CAAe,IAAf,EAAqB,SAArB;UACA,IAAI,CAAC,SAAL,IAAkB,GAAA,GAAM;QAF1B;eAGA;MALS,CAnDX;MAyDA,YAAA,EAAc,QAAA,CAAC,IAAD,EAAO,UAAP,CAAA;AAChB,YAAA,SAAA,EAAA,CAAA,EAAA,GAAA,EAAA;QAAI,IAA6B,OAAO,UAAP,KAAsB,QAAnD;UAAA,UAAA,GAAa,CAAC,UAAD,EAAb;;QACA,KAAA,4CAAA;;UACE,CAAA,GAAI,IAAI,MAAJ,CAAW,SAAA,GAAY,SAAZ,GAAwB,KAAnC,EAA0C,GAA1C;UACJ,IAAI,CAAC,SAAL,GAAiB,IAAI,CAAC,SAAS,CAAC,OAAf,CAAuB,CAAvB,EAA0B,EAA1B;QAFnB;eAGA;MALY;IAzDd;EAnTI;;EAkXN,MAAM,CAAC,OAAP,GAAiB;AA9YjB",
  "sourcesContent": [
    "ogid = (radix, rnd) ->\r\n  parseInt((new Date().valueOf() - new Date(2020,0,1).valueOf()).toString().concat(Math.floor(Math.random() * (9999 or rnd))).split('').reverse().join('')).toString(radix or 36)\r\nhash = (str) ->\r\n  if typeof str is 'undefined'\r\n    return 0\r\n  h = 5381\r\n  i = str.length\r\n  while i\r\n    h = (h * 33) ^ str.charCodeAt --i\r\n  h\r\nhashObject = (obj) ->\r\n  hashed = {}\r\n  for key, val of obj\r\n    continue if /^\\$/.test key\r\n    hashed[key] = hash JSON.stringify(val)\r\n  hashed\r\nCallbacks = ->\r\n  callbacks = {}\r\n  $on: (name, fn) ->\r\n    callbacks[name] = callbacks[name] or []\r\n    callbacks[name].push fn\r\n  $off: (name, fn) ->\r\n    callbacks[name] = callbacks[name] or []\r\n    callbacks[name].splice callbacks[name].indexOf(fn), 1\r\n  $call: (name, data) ->\r\n    if callbacks[name]\r\n      for fn in callbacks[name]\r\n        await fn data\r\nYma = (appName) ->\r\n  rootElem = null\r\n  makeId = (node, root) ->\r\n    root = root or rootElem\r\n    return 'root' if node is root\r\n    id = ''\r\n    while node isnt root\r\n      id += node.tagName + ':'\r\n      mynode = node\r\n      while mynode.previousSibling\r\n        id += mynode.tagName + '@'\r\n        mynode = mynode.previousSibling\r\n      node = node.parentNode\r\n    id\r\n  evalInContext = (str, context) ->\r\n    try\r\n      (new Function(\"with(this) {return #{str}}\"))\r\n      .call context\r\n  fillTemplate = (template, scope) ->\r\n    template.replace /\\{\\{(.+?)\\}\\}/g, (all, expression) ->\r\n      evalInContext(expression, scope) or ''\r\n  components = {}\r\n  elements = []\r\n  scopes = {}\r\n  services = {}\r\n  callbacks = Callbacks()\r\n  bootstrapped = false\r\n  mergeScopes = (scope, merge) ->\r\n    for key, val of merge\r\n      if not /^\\$/.test key\r\n        scope[key] = val\r\n  updateScopes = ->\r\n    for id, scope of scopes\r\n      scopeElems = elements.filter (element) -> element.scope is id\r\n      if scopeElems.length is 0\r\n        scope.$parent?.$children.splice scope.$parent?.$children.indexOf(id), 1\r\n        await scope.$call 'teardown'\r\n        #remove scope from any services\r\n        delete scopes[scope.$id]\r\n  teardown = (id) ->\r\n    r = new RegExp id + '$'\r\n    elements = elements.filter (element) ->\r\n      not r.test element.id\r\n    await updateScopes()\r\n  teardownChildren = (id) ->\r\n    r = new RegExp '.+' + id + '$'\r\n    elements = elements.filter (element) ->\r\n      not r.test element.id\r\n    await updateScopes()\r\n\r\n  Scope = (merge) ->\r\n    scopeCallbacks = Callbacks()\r\n    timeouts = []\r\n    intervals = []\r\n    newscope =\r\n      $id: ogid()\r\n      $children: []\r\n      $parent: null\r\n      $update: (updates, hard) ->\r\n        myscope = @\r\n        while myscope.$parent\r\n          for key of updates\r\n            if typeof(myscope[key]) isnt 'undefined'\r\n              sharedWithParent = myscope[key] is myscope.$parent?[key]\r\n              myscope[key] = updates[key]\r\n              delete updates[key] if not sharedWithParent\r\n            else\r\n              delete updates[key]\r\n\r\n          myscope = myscope.$parent\r\n        updatedScopes = Object.values(scopes).filter (scope) -> (JSON.stringify(scope.$hash) isnt JSON.stringify(hashObject scope))\r\n        index = 0\r\n        while updatedScopes.length > index + 1\r\n          i = updatedScopes.length\r\n          while i-- > index\r\n            if updatedScopes[i].$isDescendantOf updatedScopes[0]\r\n              updatedScopes.splice i, 1\r\n              continue\r\n            if updatedScopes[i].$isAncestorOf updatedScopes[0]\r\n              updatedScopes[0] = updatedScopes[i]\r\n              updatedScopes.splice i, 1\r\n              continue\r\n          index++\r\n        updateScope = (scope, changedVars) ->\r\n          myhash = hashObject scope\r\n          for key, val of myhash\r\n            if val isnt scope.$hash?[key]\r\n              if typeof(changedVars[key]) isnt 'undefined'\r\n                changedVars[key] = scope[key]\r\n            else\r\n              if typeof(changedVars[key]) isnt 'undefined'\r\n                scope[key] = changedVars[key]\r\n          scope.$hash = myhash\r\n          for childScope in scope.$children\r\n            updateScope childScope, changedVars\r\n        preRoot = document.createElement 'div'\r\n        preElements = []\r\n        realRoot = elements[0]\r\n        preRoot.innerHTML = realRoot.html\r\n        await preRender preRoot, preRoot, 0, preElements\r\n        unknowns = preElements.filter (element) -> /^UNKNOWN@/.test(element.id)\r\n        elemsToUpdate = []\r\n        unknowns.forEach (unknown) ->\r\n          parentId = unknown.id.replace /UNKNOWN@\\w+:[\\w@]+@/, ''\r\n          elemsToUpdate.push parentId if not elemsToUpdate.includes parentId\r\n        for elemId in elemsToUpdate\r\n          element = elements.filter((element) -> element.id is elemId)[0]\r\n          if element\r\n            scope = scopes[element.scope]\r\n            await teardownChildren elemId\r\n            element.elem.innerHTML = element.html\r\n            await renderChildren element.elem, scope\r\n        reset = (scope) ->\r\n          elemsToReset = elements.filter (element) ->\r\n            element.scope is scope.$id\r\n          for elem in elemsToReset\r\n            t = 0\r\n            for node in elem.elem.childNodes\r\n              if node.nodeType is document.TEXT_NODE\r\n                node.replaceWith elem.textNodes[t++] or ''\r\n            for name, val of elem.attributes\r\n              elem.elem.setAttribute name, val\r\n          reset childScope for childScope in scope.$children\r\n        i = updatedScopes.length\r\n        while i-- > 0\r\n          updateScope updatedScopes[i], {}\r\n          reset updatedScopes[i]\r\n          await updatedScopes[i].$callChildren 'update'\r\n        await fillVars()\r\n        await checkAttrs()\r\n        preRoot = null\r\n        return\r\n      $use: (name) ->\r\n        if service = services[name]\r\n          @[name] = service.fn\r\n          service.scopes.push @.$id\r\n        else if component = components[name.toUpperCase()]\r\n          services[name] =\r\n            fn: (component.service or component)()\r\n            scopes: [@.$id]\r\n          @[name] = services[name].fn\r\n        @.$on 'teardown', ->\r\n          services[name].scopes.splice services[name].scopes.indexOf(@.$id), 1\r\n      $on: scopeCallbacks.$on\r\n      $off: scopeCallbacks.$off\r\n      $call: scopeCallbacks.$call\r\n      $callChildren: (name, data) ->\r\n        await scopeCallbacks.$call name, data\r\n        for childScope in @.$children\r\n          await childScope.$callChildren name, data\r\n        null\r\n      $isDescendantOf: (scope) ->\r\n        return false if scope.$id is @.$id\r\n        myscope = @\r\n        while myscope.$parent\r\n          return true if myscope.$id is scope.$id\r\n          myscope = myscope.$parent\r\n        false\r\n      $isAncestorOf: (scope) ->\r\n        return false if scope.$id is @.$id\r\n        check = (myscope) ->\r\n          return true if myscope.$id is scope.$id\r\n          for childScope in myscope.$children\r\n            return true if check childScope\r\n          false\r\n        check scope\r\n      $timeout: (fn, delay) ->\r\n        if timeouts.length is 0\r\n          scopeCallbacks.$on 'teardown', ->\r\n            for timeout in timeouts\r\n              window.clearTimeout timeout\r\n        timeouts.push window.setTimeout fn, delay\r\n      $interval: (fn, delay) ->\r\n        if intervals.length is 0\r\n          scopeCallbacks.$on 'teardown', ->\r\n            for interval in intervals\r\n              window.clearTimeout interval\r\n        intervals.push window.setTimeout fn, delay\r\n    if merge and merge.$id\r\n      merge.$children.push newscope\r\n      newscope.$parent = merge\r\n    mergeScopes newscope, merge\r\n    newscope\r\n  getProps = (elem) ->\r\n    myattrs = {}\r\n    elem.getAttributeNames().forEach (name) -> myattrs[name] = elem.getAttribute(name)\r\n    myattrs\r\n  renderChildren = (elem, scope) ->\r\n    children = []\r\n    children.push child for child in elem.children\r\n    await render child, scope for child in children\r\n  render = (elem, scope) ->\r\n    preId = null\r\n    scopes[scope.$id] = scope\r\n    scope.$hash = hashObject scope\r\n    scope.$call 'bootstrap'\r\n    html = elem.innerHTML\r\n    textNodes = []\r\n    attributes = {}\r\n    for node in elem.childNodes\r\n      textNodes.push node.data if node.nodeType is document.TEXT_NODE\r\n    for attr in elem.getAttributeNames()\r\n      attributes[attr] = elem.getAttribute attr\r\n      if attrComponent = components[attr.toUpperCase()]\r\n        myscopes = await attrComponent.pre scope, elem, getProps(elem) if typeof(attrComponent.pre) is 'function'\r\n        if typeof(myscopes) isnt 'undefined'\r\n          elem.removeAttribute attr\r\n          preId = 'PREX:' + makeId elem\r\n          if myscopes\r\n            if myscopes.length\r\n              i = myscopes.length\r\n              while i-- > 0\r\n                clone = elem.cloneNode()\r\n                clone.innerHTML = elem.innerHTML\r\n                elem.parentNode.insertBefore clone, elem.nextSibling\r\n                render clone, myscopes[i]\r\n              elem.parentNode.removeChild elem\r\n            else\r\n              elem.parentNode.removeChild elem if myscopes.length is 0\r\n            #return#check this\r\n        elem.setAttribute 'checkattrs', true\r\n    if component = components[elem.tagName]\r\n      newscope = Scope scope\r\n      scope = newscope\r\n      scopes[scope.$id] = scope\r\n      component.controller scope, elem if component.controller\r\n      scope.$hash = hashObject scope\r\n      elem.innerHTML = if component.template then component.template else html\r\n      elem.innerHTML = elem.innerHTML.replace '<children></children>', html\r\n    elements.push\r\n      id: preId or makeId elem\r\n      elem: elem\r\n      scope: scope.$id\r\n      html: html\r\n      textNodes: textNodes\r\n      attributes: attributes\r\n    await renderChildren elem, scope\r\n\r\n  preRenderChildren = (elem, root, preElements) ->\r\n    children = []\r\n    children.push child for child in elem.children\r\n    await preRender child, root, 0, preElements for child in children\r\n  preRender = (elem, root, index, preElements) ->\r\n    id = makeId elem, root\r\n    preId = 'PREX:' + id\r\n    html = elem.innerHTML\r\n    attributes = {}\r\n    #get scope using id\r\n    realElem = elements.filter((myelem) -> (myelem.id is id) or (myelem.id is preId))[index]\r\n    scope = scopes[realElem?.scope]\r\n    if not (realElem or scope)\r\n      preElements.push\r\n        id: 'UNKNOWN@' + id\r\n      return\r\n    #get .pre scopes\r\n    for attr in elem.getAttributeNames()\r\n      attributes[attr] = elem.getAttribute attr\r\n      if attrComponent = components[attr.toUpperCase()]\r\n        myscopes = await attrComponent.pre scope, elem, getProps(elem) if typeof(attrComponent.pre) is 'function'\r\n        if typeof(myscopes) isnt 'undefined'\r\n          if myscopes\r\n            if myscopes.length\r\n              i = myscopes.length\r\n              while i-- > 0\r\n                myscopes[i].$parent.$children.splice myscopes[i].$parent.$children.indexOf myscopes[i], 1\r\n                clone = elem.cloneNode()\r\n                clone.innerHTML = elem.innerHTML\r\n                clone.removeAttribute attr\r\n                elem.parentNode.insertBefore clone, elem.nextSibling\r\n                await preRender clone, root, i - 1, preElements\r\n              elem.parentNode.removeChild elem\r\n            else\r\n              if myscopes.length is 0\r\n                preElements.push\r\n                  id: 'UNKNOWN@H1:H1@' + makeId(elem.parentNode, root)\r\n                elem.parentNode.removeChild elem\r\n                return\r\n    #  preRender pre stuff\r\n    #get component\r\n    if component = components[elem.tagName]\r\n      elem.innerHTML = if component.template then component.template else html\r\n      elem.innerHTML = elem.innerHTML.replace '<children></children>', html\r\n    #render component\r\n    #push to preElements\r\n    preElements.push\r\n      id: id\r\n    #preRenderChildren\r\n    await preRenderChildren elem, root, preElements\r\n\r\n  fillVars = ->\r\n    i = elements.length\r\n    while i-- > 0\r\n      for node in elements[i].elem.childNodes\r\n        if node.nodeType is document.TEXT_NODE and /\\{\\{/.test node.data\r\n          node.replaceWith fillTemplate node.data, scopes[elements[i].scope]\r\n      for name in elements[i].elem.getAttributeNames()\r\n        if /\\{\\{/.test (val = elements[i].elem.getAttribute(name))\r\n          elements[i].elem.setAttribute name, fillTemplate(val, scopes[elements[i].scope])\r\n  checkAttrs = ->\r\n    for elem in elements\r\n      if elem.elem.getAttribute 'checkattrs'\r\n        elem.elem.removeAttribute 'checkattrs'\r\n        for attr in elem.elem.getAttributeNames()\r\n          if attrComponent = components[attr.toUpperCase()]\r\n            attrFn = attrComponent.post or attrComponent\r\n            attrFn scopes[elem.scope], elem.elem, getProps(elem.elem) if typeof(attrFn) is 'function'\r\n            elem.elem.removeAttribute attr\r\n  render: (elem, scope) ->\r\n    if not bootstrapped\r\n      await callbacks.$call 'bootstrap'\r\n      bootstrapped = true\r\n    elem = elem or document.querySelector('[app=' + appName + ']')\r\n    rootElem = rootElem or elem\r\n    scope = scope or Scope()\r\n    await render elem, scope\r\n    await fillVars()\r\n    await checkAttrs()\r\n    callbacks.$call 'rendered'\r\n  $renderChildren: (elem, scope) ->\r\n    await renderChildren elem, scope\r\n    await fillVars()\r\n    await checkAttrs()\r\n    callbacks.$call 'rendered'\r\n  component: (nameOrObj, fn) ->\r\n    if typeof(nameOrObj) is 'object'\r\n      for name, fn of nameOrObj\r\n        components[name.toUpperCase()] = fn @\r\n    else\r\n      components[nameOrObj.toUpperCase()] = fn @\r\n    @\r\n  Scope: Scope\r\n  Callbacks: Callbacks\r\n  $getComponents: ->\r\n    components\r\n  $getElements: ->\r\n    elements\r\n  $getServices: ->\r\n    services\r\n  $getScopes: ->\r\n    scopes\r\n  $eval: evalInContext\r\n  $getProps: getProps\r\n  $teardown: teardown\r\n  $teardownChildren: teardownChildren\r\n  $on: callbacks.$on\r\n  $off: callbacks.$off\r\n  $hash: hash\r\n  $hashObject: hashObject\r\n  $makeId: makeId\r\n  $getService: (name) ->\r\n    if service = services[name]\r\n      return service.fn\r\n    else if component = components[name.toUpperCase()]\r\n      services[name] =\r\n        fn: (component.service or component)()\r\n        scopes: []\r\n      return services[name].fn\r\n    null\r\n  $addClass: (elem, classNames) ->\r\n    classNames = [classNames] if typeof(classNames) is 'string'\r\n    for className in classNames\r\n      @.$removeClass elem, className\r\n      elem.className += ' ' + className\r\n    null\r\n  $removeClass: (elem, classNames) ->\r\n    classNames = [classNames] if typeof(classNames) is 'string'\r\n    for className in classNames\r\n      r = new RegExp '\\\\s*\\\\b' + className + '\\\\b', 'g'\r\n      elem.className = elem.className.replace r, ''\r\n    null\r\nmodule.exports = Yma\r\n"
  ]
}